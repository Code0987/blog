{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["Content","styled","div","props","theme","breakpoints","tablet","phone","Hero","colors","grey","dark","IndexPage","data","posts","allMdx","nodes","mediumPosts","allMediumPost","map","post","title","date","createdAt","excerpt","virtuals","subtitle","url","uniqueSlug","timeToRead","Math","round","readingTime","slug","categories","key","id","frontmatter","fields","IndexQuery"],"mappings":"8LAQMA,G,KAAUC,IAAOC,IAAV,qEAAGD,CAAH,sMAKU,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,YAAYC,UAGjC,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,YAAYE,UAMlDC,EAAOP,IAAOC,IAAV,kEAAGD,CAAH,iRAIC,SAAAE,GAAK,OAAIA,EAAMC,MAAMK,OAAOC,KAAKC,QAErB,SAAAR,GAAK,OAAIA,EAAMC,MAAMC,YAAYE,SAO/B,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,YAAYC,UAGjC,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,YAAYE,SA8C3CK,UAxCG,SAAC,GAAD,QAChBC,KACmBC,EAFH,EAEdC,OAAUC,MACcC,EAHV,EAGdC,cAAiBF,MAHH,OAMd,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACR,EAAD,MACA,kBAACR,EAAD,KACE,kBAAC,IAAD,eACCiB,EAAYE,KAAI,SAAAC,GAAI,OACnB,kBAAC,IAAD,CACEC,MAAOD,EAAKC,MACZC,KAAMF,EAAKG,UACXC,QAASJ,EAAKK,SAASC,SACvBC,IAAG,wBAA0BP,EAAKQ,WAClCC,WAAYC,KAAKC,MAAMX,EAAKK,SAASO,YAAa,GAClDC,KAAMb,EAAKa,KACXC,WAAY,KAAMd,EAClBe,IAAKf,EAAKgB,QAGbtB,EAAMK,KAAI,SAAAC,GAAI,OACb,kBAAC,IAAD,CACEC,MAAOD,EAAKiB,YAAYhB,MACxBC,KAAMF,EAAKiB,YAAYf,KACvBE,QAASJ,EAAKI,QACdG,IAAKP,EAAKiB,YAAYV,IACtBE,WAAYT,EAAKS,WACjBI,KAAMb,EAAKkB,OAAOL,KAClBC,WAAYd,EAAKiB,YAAYH,WAC7BC,IAAKf,EAAKkB,OAAOL,cAqBxB,IAAMM,EAAU","file":"component---src-pages-index-js-868f30324a43b364b36b.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { Layout, Article, Wrapper, Button, SectionTitle } from '../components'\nimport config from '../../config'\n\nconst Content = styled.div`\n  grid-column: 2;\n  box-shadow: 0 4px 120px rgba(0, 0, 0, 0.1);\n  border-radius: 1rem;\n  padding: 3rem 6rem;\n  @media (max-width: ${props => props.theme.breakpoints.tablet}) {\n    padding: 3rem 2rem;\n  }\n  @media (max-width: ${props => props.theme.breakpoints.phone}) {\n    padding: 2rem 1.5rem;\n  }\n  overflow: hidden;\n`\n\nconst Hero = styled.div`\n  grid-column: 2;\n  padding: 3rem 2rem 6rem 2rem;\n  text-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);\n  color: ${props => props.theme.colors.grey.dark};\n\n  @media (max-width: ${props => props.theme.breakpoints.phone}) {\n    padding: 2rem 1rem 4rem 1rem;\n  }\n\n  p {\n    font-size: 1.68rem;\n    margin-top: -1rem;\n    @media (max-width: ${props => props.theme.breakpoints.tablet}) {\n      font-size: 1.45rem;\n    }\n    @media (max-width: ${props => props.theme.breakpoints.phone}) {\n      font-size: 1.25rem;\n    }\n  }\n`\n\nconst IndexPage = ({\n  data: {\n    allMdx: { nodes: posts },\n    allMediumPost: { nodes: mediumPosts },\n  },\n}) => (\n    <Layout>\n      <Wrapper>\n        <Hero>{/* <h1>Hi.</h1> */}</Hero>\n        <Content>\n          <SectionTitle>Latest</SectionTitle>\n          {mediumPosts.map(post => (\n            <Article\n              title={post.title}\n              date={post.createdAt}\n              excerpt={post.virtuals.subtitle}\n              url={`https://medium.com/p/${post.uniqueSlug}`}\n              timeToRead={Math.round(post.virtuals.readingTime, 0)}\n              slug={post.slug}\n              categories={[] || post.virtuals.tags.map(x => x.name)} // TODO: Impl. categories for all\n              key={post.id}\n            />\n          ))}\n          {posts.map(post => (\n            <Article\n              title={post.frontmatter.title}\n              date={post.frontmatter.date}\n              excerpt={post.excerpt}\n              url={post.frontmatter.url}\n              timeToRead={post.timeToRead}\n              slug={post.fields.slug}\n              categories={post.frontmatter.categories}\n              key={post.fields.slug}\n            />\n          ))}\n        </Content>\n      </Wrapper>\n    </Layout>\n  )\n\nexport default IndexPage\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      nodes: PropTypes.array.isRequired,\n    }),\n    allMediumPost: PropTypes.shape({\n      nodes: PropTypes.array.isRequired,\n    }),\n  }).isRequired,\n}\n\nexport const IndexQuery = graphql`\n  query IndexQuery {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          date(formatString: \"MM/DD/YYYY\")\n          categories\n          url\n        }\n        excerpt(pruneLength: 200)\n        timeToRead\n      }\n    }\n    allMediumPost(sort: { fields: [createdAt], order: DESC }) {\n      nodes {\n        id\n        slug\n        uniqueSlug\n        title\n        virtuals {\n          subtitle\n          tags {\n            name\n          }\n          readingTime\n        }\n        createdAt(formatString: \"MM/DD/YYYY\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}